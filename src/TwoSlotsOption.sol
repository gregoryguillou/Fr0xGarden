// SPDX-License-Identifier: CC-BY-NC-ND-4.0 (Creative Commons Attribution Non Commercial No Derivatives 4.0 International)
pragma solidity 0.8.17;

import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

/// @title TwoSlotsOption
/// @author @fr0xMaster
/// @notice Mutual Slots implementation of Two Slots Option contract.

contract TwoSlotsOption is Ownable {
    address public FEES_COLLECTOR; //address who receives fees generated by contract activity
    uint8 public FEE_NUMERATOR; //numerator to calculate fees //TODO: transfer to Constructor
    uint16 public FEE_DENOMINATOR = 1000; //denominator to calculate fees //TODO: transfer to Constructor
    uint256 public MIN_BET = 0.001 ether; //minimum amount to bet //TODO: transfer to Constructor
    uint256 public MAX_BET = 10 ether; //maximum amount to bet //TODO: transfer to Constructor
    uint64 public EPOCH = 10 minutes; //duration of an epoch expressed in seconds //TODO: transfer to Constructor
    Contest[] contests; //array of all contests formatted as struct Contest

    constructor(
        address _FEES_COLLECTOR,
        uint8 _FEE_NUMERATOR,
        uint16 _FEE_DENOMINATOR,
        uint256 _MIN_BET,
        uint256 _MAX_BET,
        uint64 _EPOCH
    ) {
        FEES_COLLECTOR = _FEES_COLLECTOR;
        FEE_NUMERATOR = _FEE_NUMERATOR;
        FEE_DENOMINATOR = _FEE_DENOMINATOR;
        MIN_BET = _MIN_BET;
        MAX_BET = _MAX_BET;
        EPOCH = _EPOCH;
    }

    /// @notice Status of a Contest. The status can alternate between 3 different states.
    // OPEN is the default status when a new Contest is created. In this status, if the contest is not mature, users can buy a slot option.
    // RESOLVED is the status assigned once the Contest has reached maturity and a winning slot has been determined in favor of a loser.
    // REFUNDABLE is the status assigned once the v has reached its maturity but the conditions are not met to determine a winner.
    enum ContestStatus {
        OPEN,
        RESOLVED,
        REFUNDABLE
    }

    /// @notice Status of an Option. The status can alternate between 3 different states.
    // CREATED is the default status when a new Option is created. This status defines that an Option has been created and is attached to an address.
    // CLAIMED status is assigned to a winning Option and claimed by the linked address.
    // REFUND status is assigned when an Option has no winner and the linked address has been refunded its initial Option.
    enum OptionStatus {
        CREATED,
        CLAIMED,
        REFUND
    }

    enum WinningSlot {
        UNDEFINED,
        LESS,
        MORE
    }

    struct Option {
        OptionStatus optionStatus;
        uint256 amount;
    }

    struct Slot {
        uint256 totalAmount;
        uint256 payout;
        mapping(address => Option) options;
    }

    struct Contest {
        ContestStatus contestStatus; // Status of the current Contest
        uint128 contestID; // ID of Contest
        uint64 startedAt; // Unix timestamp at contest creation
        uint64 maturityAt; // Unix timestamp at contest maturity
        address creator; // Address who created contest. Will receive a share of the fees generated.
        address resolver; // Address who resolve contest. Will receive a share of the fees generated.
        uint256 startingPrice; // Token price at contest creation
        uint256 maturyityPrice; // Token price at contest maturity
        WinningSlot winningSlot; // Defines the winning slot once the Contest is resolved
        Slot slotLess;
        Slot slotMore;
    }

    /// @notice Calculate fees to be deducted from a given amount
    /// @dev Fee amount by dividing the numerator by the denominator which - e.g: 3/100 = 0.03 or 3% percent;
    /// @param _amount amount between 1e15 & 1e20.
    /// @return fees amount in wei
    function getFeeByAmount(uint96 _amount) public view returns (uint256) {
        return _amount * FEE_NUMERATOR / FEE_DENOMINATOR;
    }
}
